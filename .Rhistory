# Subculture
if(nrow(plantlets)>0){
subcul = plantlets[,c("Location","PlantletID","Mother","Father","Subculture Date","Copies")]
colnames(subcul) <- c("Location","Accession","Mother","Father","Date", "Copies")
subcul$Date = anytime::anydate(as.character(subcul$Date))
if(nrow(subcul)>0){
subcul$Activity = "Subculturing"
}
subcul = subcul[complete.cases(subcul),]
} else{
subcul = data.frame(Location = character(), Accession = character(),Mother = character(),Father = character(),Date= anytime::anydate(integer(0)), Copies=character())
}
# # Rooted
if(nrow(plantlets)>0){
rooted = plantlets[,c("Location","PlantletID","Mother","Father","Date of Rooting","Number Rooting")]
colnames(rooted) <- c("Location","Accession","Mother","Father","Date","Number Rooting")
if(nrow(rooted)>0){
rooted$Activity = "Rooting"
}
rooted = rooted[complete.cases(rooted),]
} else{
rooted = data.frame(Location = character(), Accession = character(),Mother = character(),Father = character(),Date = anytime::anydate(integer(0)))
}
if(nrow(plantlets)>0){
weaning1 = plantlets[,c("Location","PlantletID","Mother","Father","Sending Out Date", "Number Sent Out")]
colnames(weaning1) <- c("Location","Accession","Mother","Father","Date", "Number Sent Out")
if(nrow(weaning1)>0){
weaning1$Activity = "Weaning 1/ Sent out"
}
weaning1 = weaning1[complete.cases(weaning1),]
} else{
weaning1 = data.frame(Location = character(), Accession = character(),Mother = character(),Father = character(),Date = anytime::anydate(integer(0)))
}
if(nrow(plantlets)>0){
weaning2 = plantlets[,c("Location","PlantletID","Mother","Father","Weaning 2 Date", "Weaning 2 Plantlets")]
colnames(weaning2) <- c("Location","Accession","Mother","Father","Date", "Number in Weaning2")
if(nrow(weaning2)>0){
weaning2$Activity = "Weaning 2"
}
weaning2 = weaning2[complete.cases(weaning2),]
} else{
weaning2 = data.frame(Location = character(), Accession = character(),Mother = character(),Father = character(),Date = anytime::anydate(integer(0)))
}
# Screenhse
if(nrow(plantlets)>0){
screen_housed = plantlets[,c("Location","PlantletID","Mother","Father","Screenhouse Transfer Date", "Number in Screenhouse" )]
colnames(screen_housed) <- c("Location","Accession","Mother","Father","Date", "Number in Screenhouse" )
if(nrow(screen_housed)>0){
screen_housed$Activity = "Screen house"
}
screen_housed = screen_housed[complete.cases(screen_housed),]
} else {
screen_housed = data.frame(Location = character(), Accession = character(),Mother = character(),Father = character(),Date = anytime::anydate(integer(0)))
}
# Hardened
if(nrow(plantlets)>0){
hardened = plantlets[,c("Location","PlantletID","Mother","Father","Hardening Date","Number in Hardening")]
colnames(hardened) <- c("Location","Accession","Mother","Father","Date","Number Hardening")
if(nrow(hardened)>0){
hardened$Activity = "Hardening"
}
hardened = hardened[complete.cases(hardened),]
} else {
hardened = data.frame(Location = character(), Accession = character(),Mother = character(),Father = character(),Date = anytime::anydate(integer(0)))
}
# Openfield
if(nrow(plantlets)>0){
open_field = plantlets[,c("Location","PlantletID","Mother","Father","Openfield Transfer Date", "Number in Openfield")]
colnames(open_field) <- c("Location","Accession","Mother","Father","Date", "Number in Openfield")
if(nrow(open_field)>0){
open_field$Activity = "Open field"
}
open_field = open_field[complete.cases(open_field),]
} else {
open_field = data.frame(Location = character(), Accession = character(),Mother = character(),Father = character(),Date = anytime::anydate(integer(0)))
}
cleantable = plyr::rbind.fill(flowered,first_pollinationed,repeat_pollinationed,harvested,extracted,rescued,germinated,
subcul, rooted,weaning1, weaning2,screen_housed,hardened, open_field)
cleantable$Date = anytime::anydate(as.character(cleantable$Date))
names(plantlets)
names(plantlets)
names(bananadata)
runApp()
names(plantlets)
all_plants = dplyr::left_join(bananadata, plantlets, by="Crossnumber")
dim(all_plants)
dim(bananadata)
names(plantlets)
dim(plantlets)
264+1080
all_plants[1:4,]
names(plantlets)
all_plants = dplyr::left_join(bananadata, plantlets[,-1], by="Crossnumber")
names(all_plants)
all_plants = dplyr::left_join(bananadata, plantlets[,c("Crossnumber","Copies","Number Rooting","Number Sent Out","Weaning 2 Plantlets" ,
"Number in Screenhouse","Number in Hardening","Number in Openfield" )], by="Crossnumber")
names(all_plants)
dim(all_plants)
dim(bananadata)
View(all_plants)
duplicated(all_plants)
duplicated(all_plants$Crossnumber)
table(duplicated(all_plants$Crossnumber))
all_plants[duplicated(all_plants$Crossnumber)==T]
all_plants[duplicated(all_plants$Crossnumber)==T,]
all_plants[duplicated(all_plants$Crossnumber)==T,][1:4,]
all_plants %<>%
dplyr::summarise(Subcultures=sum(na.omit(Copies), `Number Rooting`= sum(na.omit(Number Rooting)) `Number Sent Out`=sum(na.omit(`Number Sent Out`)),
all_plants %>%
dt = all_plants %>%
dplyr::summarise(Subcultures=sum(na.omit(Copies), `Number Rooting`= sum(na.omit(Number Rooting)) `Number Sent Out`=sum(na.omit(`Number Sent Out`)),
dt = all_plants %>%
dplyr::summarise(Subcultures=sum(na.omit(Copies), `Number Rooting`= sum(na.omit(Number Rooting)) `Number Sent Out`=sum(na.omit(`Number Sent Out`)),
dt = all_plants %>%
dplyr::group_by(Crossnumber) %>%
dplyr::summarise(Subcultures=sum(na.omit(Copies)), `Number Rooting`= sum(na.omit(Number Rooting)) `Number Sent Out`=sum(na.omit(`Number Sent Out`)),
`Weaning 2 Plantlets`=sum(na.omit(`Weaning 2 Plantlets`)), `Number in Screenhouse`=sum(na.omit(`Number in Screenhouse`)),
`Number in Hardening`=sum(na.omit(`Number in Hardening`)), `Number in Openfield`=sum(na.omit(`Number in Openfield`)))
dt = all_plants %>%
dplyr::group_by(Crossnumber) %>%
dplyr::summarise(Subcultures=sum(na.omit(Copies)), `Number Rooting`= sum(na.omit(Number Rooting)) `Number Sent Out`=sum(na.omit(`Number Sent Out`))
dt = all_plants %>%
dplyr::group_by(Crossnumber) %>%
dplyr::summarise(Subcultures=sum(na.omit(Copies)), `Number Rooting`= sum(na.omit(Number Rooting)) `Number Sent Out`=sum(na.omit(`Number Sent Out`)),
`Weaning 2 Plantlets`=sum(na.omit(`Weaning 2 Plantlets`)), `Number in Screenhouse`=sum(na.omit(`Number in Screenhouse`)),
`Number in Hardening`=sum(na.omit(`Number in Hardening`)), `Number in Openfield`=sum(na.omit(`Number in Openfield`)))
dt = all_plants %>%
dplyr::group_by(Crossnumber)
dim(dt)
dt = all_plants %>%
dplyr::group_by(Crossnumber) %>%
dplyr::summarise(Subcultures=sum(na.omit(as.integer(Copies))), `Number Rooting`= sum(na.omit(as.integer(Number Rooting))), `Number Sent Out`=sum(na.omit(as.integer(`Number Sent Out`))),
`Weaning 2 Plantlets`=sum(na.omit(as.integer(`Weaning 2 Plantlets`))), `Number in Screenhouse`=sum(na.omit(as.integer(`Number in Screenhouse`))),
`Number in Hardening`=sum(na.omit(as.integer(`Number in Hardening`))), `Number in Openfield`=sum(na.omit(as.integer(`Number in Openfield`))))
dt = all_plants %>%
dplyr::group_by(Crossnumber) %>%
dplyr::summarise(Subcultures=sum(na.omit(as.integer(Copies))), `Number Rooting`= sum(na.omit(as.integer(Number Rooting))), `Number Sent Out`=sum(na.omit(as.integer(`Number Sent Out`)))
dt = all_plants %>%
dplyr::group_by(Crossnumber) %>%
dplyr::summarise(Subcultures=sum(na.omit(as.integer(Copies))), `Number Rooting`= sum(na.omit(as.integer(`Number Rooting`))), `Number Sent Out`=sum(na.omit(as.integer(`Number Sent Out`))),
`Weaning 2 Plantlets`=sum(na.omit(as.integer(`Weaning 2 Plantlets`))), `Number in Screenhouse`=sum(na.omit(as.integer(`Number in Screenhouse`))),
`Number in Hardening`=sum(na.omit(as.integer(`Number in Hardening`))), `Number in Openfield`=sum(na.omit(as.integer(`Number in Openfield`))))
dim(dt)
View(dt)
duplicated(dt$Crossnumber)
table(duplicated(dt$Crossnumber))
names(all_plants)
dt = all_plants %>%
dplyr::group_by(Crossnumber) %>%
dplyr::summarise("Location", Subcultures=sum(na.omit(as.integer(Copies))), `Number Rooting`= sum(na.omit(as.integer(`Number Rooting`))), `Number Sent Out`=sum(na.omit(as.integer(`Number Sent Out`))),
`Weaning 2 Plantlets`=sum(na.omit(as.integer(`Weaning 2 Plantlets`))), `Number in Screenhouse`=sum(na.omit(as.integer(`Number in Screenhouse`))),
`Number in Hardening`=sum(na.omit(as.integer(`Number in Hardening`))), `Number in Openfield`=sum(na.omit(as.integer(`Number in Openfield`))))
View(dt)
dt = all_plants %>%
dplyr::group_by(Crossnumber) %>%
dplyr::summarise(Location, Subcultures=sum(na.omit(as.integer(Copies))), `Number Rooting`= sum(na.omit(as.integer(`Number Rooting`))), `Number Sent Out`=sum(na.omit(as.integer(`Number Sent Out`))),
`Weaning 2 Plantlets`=sum(na.omit(as.integer(`Weaning 2 Plantlets`))), `Number in Screenhouse`=sum(na.omit(as.integer(`Number in Screenhouse`))),
`Number in Hardening`=sum(na.omit(as.integer(`Number in Hardening`))), `Number in Openfield`=sum(na.omit(as.integer(`Number in Openfield`))))
library(data.table)
# Generate random data:
loc <- 1:10
dates <- seq(as.Date("2000-01-01"), as.Date("2004-12-31"), by="month")
mods <- c("A","B", "C", "D", "E")
temp <- runif(length(loc)*length(dates)*length(mods), min=0, max=30)
df <- data.table(expand.grid(Location=loc,Date=dates,Model=mods),Temperature=temp)
df
df[,.(Mean=mean(Temperature)),.(Location,Date)];
df[,.(Mean=mean(Temperature)),.(Location,Date,Model)];
df[,.(Mean=mean(Temperature)),.(Location,Date)];
names(all_plants)
all_plants[,.(Subcultures=sum(na.omit(as.integer(Copies))), `Number Rooting`= sum(na.omit(as.integer(`Number Rooting`))), `Number Sent Out`=sum(na.omit(as.integer(`Number Sent Out`))),
`Weaning 2 Plantlets`=sum(na.omit(as.integer(`Weaning 2 Plantlets`))), `Number in Screenhouse`=sum(na.omit(as.integer(`Number in Screenhouse`))),
`Number in Hardening`=sum(na.omit(as.integer(`Number in Hardening`))), `Number in Openfield`=sum(na.omit(as.integer(`Number in Openfield`)))),
.(Location,Crossnumber,FemalePlotName,Mother,FemalePloidyLevel,MalePlotName,Father,MalePloidyLevel,First Pollination Date,Days to Maturity,
Bunch Harvest Date,Days in ripening shed,Seed Extraction Date,Total Seeds,Embryo Rescue Date,Good Seeds,Number of Embryo Rescued,Germination Date,Number of Embryo Germinating)];
all_plants[,.(Subcultures=sum(na.omit(as.integer(Copies))), `Number Rooting`= sum(na.omit(as.integer(`Number Rooting`))), `Number Sent Out`=sum(na.omit(as.integer(`Number Sent Out`))),
`Weaning 2 Plantlets`=sum(na.omit(as.integer(`Weaning 2 Plantlets`))), `Number in Screenhouse`=sum(na.omit(as.integer(`Number in Screenhouse`))),
`Number in Hardening`=sum(na.omit(as.integer(`Number in Hardening`))), `Number in Openfield`=sum(na.omit(as.integer(`Number in Openfield`)))),
.(Location,Crossnumber,FemalePlotName,Mother,FemalePloidyLevel,MalePlotName,Father,MalePloidyLevel,First Pollination Date,`Days to Maturity`,
Bunch Harvest Date,Days in ripening shed,Seed Extraction Date,Total Seeds,Embryo Rescue Date,Good Seeds,Number of Embryo Rescued,Germination Date,Number of Embryo Germinating)];
all_plants[,.(Subcultures=sum(na.omit(as.integer(Copies))), `Number Rooting`= sum(na.omit(as.integer(`Number Rooting`))), `Number Sent Out`=sum(na.omit(as.integer(`Number Sent Out`))),
`Weaning 2 Plantlets`=sum(na.omit(as.integer(`Weaning 2 Plantlets`))), `Number in Screenhouse`=sum(na.omit(as.integer(`Number in Screenhouse`))),
`Number in Hardening`=sum(na.omit(as.integer(`Number in Hardening`))), `Number in Openfield`=sum(na.omit(as.integer(`Number in Openfield`)))),
.(Location,Crossnumber,FemalePlotName,Mother,FemalePloidyLevel,MalePlotName,Father,MalePloidyLevel,First Pollination Date,`Days to Maturity`,
`Bunch Harvest Date`,`Days in ripening shed`,`Seed Extraction Date`,`Total Seeds`,`Embryo Rescue Date`,`Good Seeds`,`Number of Embryo Rescued`,`Germination Date`,`Number of Embryo Germinating`)];
names(plantlets)
all_plantlets = plantlets %>%
dplyr::group_by(Crossnumber) %>%
dplyr::summarise(Subcultures=sum(na.omit(as.integer(Copies))), `Number Rooting`= sum(na.omit(as.integer(`Number Rooting`))), `Number Sent Out`=sum(na.omit(as.integer(`Number Sent Out`))),
`Weaning 2 Plantlets`=sum(na.omit(as.integer(`Weaning 2 Plantlets`))), `Number in Screenhouse`=sum(na.omit(as.integer(`Number in Screenhouse`))),
`Number in Hardening`=sum(na.omit(as.integer(`Number in Hardening`))), `Number in Openfield`=sum(na.omit(as.integer(`Number in Openfield`))))
all_plantlets
View(all_plantlets)
runApp()
names(plantlets)
runApp()
runApp()
bbDF[1:2,]
#result = bbDF %>% dplyr::filter(Date >= 2018)
result = setDT(bbDF)[Date>=2018]
dim(result)
runApp()
dim(bbDF)
#result = bbDF %>% dplyr::filter(Date >= 2018)
result = setDT(bbDF)#[Date>=2018]
dim(result)
#result = bbDF %>% dplyr::filter(Date >= 2018)
result = setDT(bbDF)[Date>=2018]
dim(result)
result = result[result$Activity !='Status'] # recent records
dim(result)
runApp()
runApp()
runApp()
result = setDT(bbDF)
result[1:4,]
dim(result)
#result = bbDF %>% dplyr::filter(Date >= 2018)
result = setDT(bbDF)[Date>=2018,]
dim(result)
result
result$Date
result = bbDF
dim(result)
result = bbDF %>% dplyr::filter(lubridate::year(Date) >= 2018) %>%
setDT()
dim(result)
runApp()
runApp()
runApp()
dim(aa)
dim(bb)
x = bb[Activity=='Flowering' & Date >= Sys.Date()-7]
dim(x)
x
table(bbDF$Activity)
first_pollinationed
first_pollinationed[lubridate::year(first_pollinationed$Date)==2019,]
first_pollinationed[lubridate::date(first_pollinationed$Date)==Sys.Date()-1,]
bbDF[Accession=="SE201905_(162845C1/132594)",]
cleantable
table(cleantable$Date)
bbDF[Accession=="SE201905_(162845C1/132594)",]
dim(cleantable)
flowered
first_pollinationed
table(is.na(first_pollinationed$Date))
extracted
table(is.na(extracted$Date))
rescued
table(is.na(rescued$Date))
table(is.na(germinated$Date))
table(is.na(subcul$Date))
table(is.na(rooted$Date))
table(is.na(weaning1$Date))
table(is.na(weaning2$Date))
table(is.na(repeat_pollinationed$Date))
table(is.na(harvested$Date))
table(is.na(extracted$Date))
# Extracted
extracted = bananadata[, c("Location","Crossnumber","Mother","Father","Seed Extraction Date","Total Seeds")]
colnames(extracted)[c(1:6)] <- c("Location","Accession","Mother","Father","Date","Total Seeds")
if(nrow(extracted)>0){
extracted$Activity = "Seed extraction"
}
extracted = extracted[complete.cases(extracted),]
table(is.na(extracted$Date))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
if (interactive()) {
library(shiny)
library(shinydashboard)
shinyApp(
ui = dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
box(
title = "Nav Pills",
status = "info",
"Box Body",
footer = navPills(
navPillsItem(
pillName = "Item 1",
pillColor = "green",
pillIcon = NULL,
pillText = 10
),
navPillsItem(
pillName = "Item 2",
pillColor = "red",
pillIcon = "fa fa-angle-down",
pillText = "10%",
active = TRUE
)
)
)
),
title = "Nav Pills"
),
server = function(input, output) { }
)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinyWidgetsGallery()
runApp()
runApp()
runApp()
runApp()
shinyWidgetsGallery()
shinyWidgetsGallery()
shinyWidgetsGallery()
runApp()
shinyWidgetsGallery()
runApp()
runApp()
runApp()
shinyWidgetsGallery()
runApp()
runApp()
runApp()
runApp()
if (interactive()) {
library("shiny")
library("shinyWidgets")
ui <- fluidPage(
# Default
panel(
"Content goes here",
checkboxInput(inputId = "id1", label = "Label")
),
# With header and footer
panel(
"Content goes here",
checkboxInput(inputId = "id2", label = "Label"),
heading = "My title",
footer = "Something"
),
# With status
panel(
"Content goes here",
checkboxInput(inputId = "id3", label = "Label"),
heading = "My title",
status = "primary"
)
)
server <- function(input, output, session) {
}
shinyApp(ui = ui, server = server)
}
require(shiny)
ui <- shinyUI(fluidPage(
#fixedRow(uiOutput('plots'), height="100px")
tags$style(HTML("
#plots {
height:100px;
overflow-y:scroll
}
")),
uiOutput('plots')
))
server <- shinyServer(function(input, output) {
plots <- lapply(1:10, function(i){
plot(runif(50),main=sprintf('Plot nr #%d',i))
p <- recordPlot()
plot.new()
p
})
n.col <- 3
output$plots <- renderUI({
col.width <- round(12/n.col) # Calculate bootstrap column width
n.row <- ceiling(length(plots)/n.col) # calculate number of rows
cnter <<- 0 # Counter variable
# Create row with columns
rows  <- lapply(1:n.row,function(row.num){
cols  <- lapply(1:n.col, function(i) {
cnter    <<- cnter + 1
plotname <- paste("plot", cnter, sep="")
column(col.width, plotOutput(plotname, height = 280, width = 250))
})
fluidRow( do.call(tagList, cols) )
})
do.call(tagList, rows)
})
for (i in 1:length(plots)) {
local({
n <- i # Make local variable
plotname <- paste("plot", n , sep="")
output[[plotname]] <- renderPlot({
plots[[n]]
})
})
}
})
shinyApp(ui=ui,server=server)
ui <- fluidPage(
tabsetPanel(
id = "tabsetpanel",
tabPanel(
style = "overflow-y:scroll; max-height: 600px",
h1("Group History"),
numericInput("n_users", "Number of Users", value = 5, min = 1, max = 10),
uiOutput("group_history")
)
)
)
server <- shinyServer(function(input, output) {
df_list <- reactive({
n <- input$n_users
# generate some observations
obs_x <- seq(3)
obs_y <- obs_x + n
# generate the df
df_template <- data.frame(x = obs_x, y = obs_y)
# make a list of df and return
lapply(seq(n), function(n) {
df_template
})
})
# use the constructed renders and compose the ui
output$group_history <- renderUI({
table_output_list <- lapply(seq(input$n_users), function(i) {
table_name <- paste0("table", i)
tab_name   <- paste("User", i)
fluidRow(
column(
width = 10,
h2(tab_name),
hr(), column(3, tableOutput(table_name))
)
)
})
# Convert the list to a tagList - this is necessary for the list of items
# to display properly.
do.call(tagList, table_output_list)
})
# Call renderTable for each one. Tables are only actually generated when they
# are visible on the web page.
observe({
data <- df_list()
for (i in seq(input$n_users)) {
# Need local so that each item gets its own number. Without it, the value
# of i in the renderPlot() will be the same across all instances, because
# of when the expression is evaluated.
local({
my_i               <- i
tab_name           <- paste0("table", my_i)
output[[tab_name]] <- renderTable(data[[my_i]], rownames = TRUE)
})
}
})
})
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library("shiny")
ui <- fluidPage(
titlePanel(
"Fixed sidebar panel"
),
sidebarLayout(
sidebarPanel(
style = "position:fixed;width:inherit;",
"Inputs",
width = 3),
mainPanel(
lapply(
X = 1:20,
FUN = function(i) {
plotOutput(outputId = paste("plot", i, sep = "-"))
}
),
width = 9 )
))
server <- function(input, output, session) {
lapply(
X = 1:20,
FUN = function(i) {
output[[paste("plot", i, sep = "-")]] <- renderPlot({plot(rnorm(10))})
}
)
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
