}
colnames(seeds_data) = gsub("_"," ",names(seeds_data))
status = list.files(patt="Status.csv$", recursive = TRUE) %>% # add location in script
lapply(fread) %>%
rbindlist(id=T, fill=T) %>% .[,-1]
status$Status_Date = anytime::anydate(as.character(status$Status_Date))
colnames(status) = gsub("_"," ", names(status))
status$Image = paste0("<a href='",status$Image,"'>",'photo',"</a>")
status = dplyr::select(status, Location, StatusID, `Status Date`,Status, everything())
contamination = list.files(patt="Contamination.csv$", recursive = TRUE) %>%
lapply(fread) %>%
rbindlist(id=T, fill=T) %>% .[,-1]
contamination$Location = as.factor(contamination$Location)
contamination$Contamination_Date = anytime::anydate(as.character(contamination$Contamination_Date))
colnames(contamination) = gsub("_"," ", names(contamination))
plantlets = list.files(patt="Plantlets.csv$", recursive = TRUE) %>%
lapply(fread) %>%
rbindlist(id=T, fill = T)
plantlets$Subculture_Date = anytime::anydate(as.character(plantlets$Subculture_Date))
plantlets$Date_of_Rooting = anytime::anydate(as.character(plantlets$Date_of_Rooting))
plantlets$Location = as.factor(plantlets$Location)
plantlets$Screenhouse_Transfer_Date = anytime::anydate(as.character(plantlets$Screenhouse_Transfer_Date))
plantlets$Hardening_Date = anytime::anydate(as.character(plantlets$Hardening_Date))
plantlets$Openfield_Transfer_Date = anytime::anydate(as.character(plantlets$Openfield_Transfer_Date))
colnames(plantlets) = gsub("_"," ", names(plantlets))
if(nrow(plantlets)>0){
plantlets$Crossnumber = ifelse(bananadata$Crossnumber==substr(plantlets$PlantletID, 1, nchar(bananadata$Crossnumber)), bananadata$Crossnumber,"")
plantlets = Reduce(function(x,y) merge(x,y, by="Crossnumber"), list(bananadata[,c("Crossnumber","Mother","Father")], plantlets))
}
crosses = list.files(patt="BananaData.csv$", recursive = TRUE) %>%
lapply(fread) %>%
rbindlist(id=T, fill = T) %>% .[,-1]
##******************************************************
crosses = setDT(crosses)[crosses[, .I[which.min(Reduce(`+`, lapply(.SD, is.na)))], Crossnumber]$V1]
crosses$First_Pollination_Date = as.Date(crosses$First_Pollination_Date)
# previous records
arusha_legacy_crosses = fread("data/Last_6_months_tisssue_culture_data.csv")
rmcol = c("contamination","badseeds",grep("^days", names(arusha_legacy_crosses), value = T))
arusha_legacy_crosses = arusha_legacy_crosses[, (rmcol) := NULL][] %>% # drop unwanted columns
setnames(colnames(.), c("Location","Crossnumber","Mother","Father","First_Pollination_Date","Bunch_Harvest_Date", "Seed_Extraction_Date",
"Total_Seeds","Good_Seeds","Number_of_Embryo_Rescued", "Embryo_Rescue_Date", "Germination_after_8_Weeks_Date",
"Active_after_8_Weeks"))
arusha_legacy_crosses$First_Pollination_Date = as.Date(arusha_legacy_crosses$First_Pollination_Date)
# merge crosses and previous datasets
banana = plyr::rbind.fill(crosses, arusha_legacy_crosses)
#banana = rbindlist(sets, use.names = T,fill=T,idcol = NULL)
banana$First_Pollination_Date = anytime::anydate(as.character(banana$First_Pollination_Date))
banana$Bunch_Harvest_Date = anytime::anydate(as.character(banana$Bunch_Harvest_Date))
banana$Seed_Extraction_Date = anytime::anydate(as.character(banana$Seed_Extraction_Date))
banana$Embryo_Rescue_Date = anytime::anydate(as.character(banana$Embryo_Rescue_Date))
banana$Germination_after_2_Weeks_Date = anytime::anydate(as.character(banana$Germination_after_2_Weeks_Date))
banana$Germination_after_8_Weeks_Date = anytime::anydate(as.character(banana$Germination_after_8_Weeks_Date))
banana$Days_to_Maturity = banana$Bunch_Harvest_Date - banana$First_Pollination_Date
banana$Days_in_ripening_shed = banana$Seed_Extraction_Date - banana$Bunch_Harvest_Date
# repeat pollination
repeatpollination = list.files(patt="RepeatPollination.csv$", recursive = TRUE) %>%
lapply(fread) %>%
rbindlist(id=T, fill=T) %>%
.[,-c(1,4)]
repeatDT = as.data.frame(repeatpollination[,number := 1:.N, by = Crossnumber])
repeatDTwide = reshape(repeatDT,direction = "wide", idvar = "Crossnumber", timevar = "number")
repeatDTwide[,2:ncol(repeatDTwide)] = lapply(repeatDTwide[,2:ncol(repeatDTwide)],anytime::anydate)
repeats = setDT(repeatDTwide)[, Number_of_repeat_pollinations := rowSums(!is.na(repeatDTwide))-1][]
bananadt = dplyr::left_join(banana, repeats, by="Crossnumber")
#Reduce(function(x,y)merge(x,y,by=c("Crossnumber")), list(banana,repeats))
#bananadt$Location = as.factor(bananadt$Location)
# select ID reported with status
bananadt$StatusID = bananadt$Crossnumber
lostInfo = dplyr::inner_join(bananadt, status, by=c("Location","StatusID"))
lostInfo = janitor::remove_empty(lostInfo,"cols")
cols.num <- grep("_Date", names(lostInfo), value = T)
lostInfo[cols.num] <- sapply(lostInfo[cols.num],as.character)
lostInfo = lostInfo %>% tidyr::gather(Last_activity_recorded, Activity_Date, contains("_Date"), na.rm=T)
lostInfo = setDT(lostInfo)[,c("Location","Crossnumber","Last_activity_recorded","Activity_Date","Status","Notes","Image")][order(-Activity_Date)]
lostInfo = lostInfo %>%
dplyr::filter(Last_activity_recorded !="Status_Date" & Activity_Date !="")
lostInfo$Last_activity_recorded = gsub("_Date","", lostInfo$Last_activity_recorded)
lostInfo$Last_activity_recorded = gsub("_"," ", lostInfo$Last_activity_recorded)
lostInfo$Last_activity_recorded = ifelse(grepl("^Repeat Pollination.", lostInfo$Last_activity_recorded, perl = T)==TRUE,"Repeat Pollination",lostInfo$Last_activity_recorded)
lostInfo = lostInfo[!duplicated(lostInfo$Crossnumber), ]
colnames(lostInfo) = gsub("_"," ", names(lostInfo))
status$Location = as.factor(status$Location)
# drop IDs reported with status
bananadata = dplyr::anti_join(bananadt, status, by="StatusID")
bananadata$StatusID = NULL
##########################################################################
bananadata = bananadata %>%
dplyr::select(Location, Crossnumber, FemalePlotName, Mother, MalePlotName, Father, First_Pollination_Date, Number_of_repeat_pollinations,
Days_to_Maturity,Bunch_Harvest_Date, Days_in_ripening_shed, everything(), -c(Cycle,starts_with("Repeat_Pollination_Date.")))
bananadata$Location = as.factor(bananadata$Location)
bananadata$Mother = as.factor(bananadata$Mother)
bananadata$Father = as.factor(bananadata$Father)
# if duplicate germplasm names, keep rows with minimum missing
bananadata = setDT(bananadata)[bananadata[, .I[which.min(Reduce(`+`, lapply(.SD, is.na)))], Crossnumber]$V1]
colnames(bananadata) = gsub("_"," ", names(bananadata))
##########################################################################################
## DATA EXPLORER
##########################################################################################
if (nrow(flowering)>0){
flowered = flowering[,c("Location","Accession Name","Flowering Date")]
flowered$Activity = "Flowering"
colnames(flowered) <- c("Location","Accession","Date","Activity")
flowered = flowered[complete.cases(flowered),]
} else {
flowered = data.frame(Location = character(), Accession = character(),Mother = character(),Father = character(),anytime::anydate(integer(0)))
}
# F.Polln
if(nrow(bananadata)>0){
first_pollinationed = bananadata[,c("Location", "Crossnumber", "Mother","Father","First Pollination Date")]
colnames(first_pollinationed) = c("Location","Accession","Mother","Father","Date")
first_pollinationed$Activity = "First pollination"
first_pollinationed = first_pollinationed[complete.cases(first_pollinationed),]
} else {
first_pollinationed = data.frame(Location = character(), Accession = character(),Mother = character(),Father = character(),anytime::anydate(integer(0)))
}
# Repeat Polln
if(nrow(repeatpollination)>0){
repeat_pollinationed = repeatpollination[,-3] %>%
dplyr::arrange(.,Crossnumber,desc(Repeat_Pollination_Date))
repeat_pollinationed = repeat_pollinationed[!duplicated(repeat_pollinationed$Crossnumber),]
repeat_pollinationed = dplyr::left_join(repeat_pollinationed, bananadata[,c("Location","Crossnumber","Mother","Father")], by="Crossnumber")
colnames(repeat_pollinationed) = c("Accession","Date","Location","Mother","Father")
repeat_pollinationed$Date = anytime::anydate(repeat_pollinationed$Date)
repeat_pollinationed $Activity = "Repeat pollination"
}
# Harvest
harvested = bananadata[,c("Location", "Crossnumber", "Mother","Father","Bunch Harvest Date")]
colnames(harvested) = c("Location","Accession","Mother","Father","Date")
if(nrow(harvested)>0){
harvested$Activity = "Harvested bunches"
}
harvested = harvested[complete.cases(harvested),]
# Extracted
extracted = bananadata[, c("Location","Crossnumber","Mother","Father","Seed Extraction Date")]
colnames(extracted) <- c("Location","Accession","Mother","Father","Date")
if(nrow(extracted)>0){
extracted$Activity = "Seed extraction"
}
extracted = extracted[complete.cases(extracted),]
# Rescue
rescued = bananadata[,c("Location","Crossnumber","Mother","Father","Embryo Rescue Date")]
colnames(rescued) <- c("Location","Accession","Mother","Father","Date")
if(nrow(rescued)>0){
rescued$Activity = "Embryo Rescue"
}
#rescued$Date = lubridate::dmy(rescued$Date)
rescued = rescued[complete.cases(rescued),]
# Germinated after 2wks
germinated_2weeks = bananadata[,c("Location","Crossnumber","Mother","Father","Germination after 2 Weeks Date")]
colnames(germinated_2weeks) <- c("Location","Accession","Mother","Father","Date")
if(nrow(germinated_2weeks)>0){
germinated_2weeks$Activity = "Germination after 2 weeks"
}
#germinated_2weeks$Date = as.Date(germinated_2weeks$Date, origin="1970-01-01")
germinated_2weeks = germinated_2weeks[complete.cases(germinated_2weeks),]
# Germinated after 8weeks
germinated_8weeks = bananadata[,c("Location","Crossnumber","Mother","Father","Germination after 8 Weeks Date")]
colnames(germinated_8weeks) <- c("Location","Accession","Mother","Father","Date")
if(nrow(germinated_8weeks)>0){
germinated_8weeks$Activity = "Germination after 8 weeks"
}
germinated_8weeks = germinated_8weeks[complete.cases(germinated_8weeks),]
#} # end if
# Seeds germinating after 8weeks
#if(nrow(seeds_data)>0){
germinating_seeds = seeds_data
germinating_seeds$Activity = "Seeds germinating after 8 weeks"
germinating_seeds = germinating_seeds[complete.cases(germinating_seeds),]
# }
# Subculture
if(nrow(plantlets)>0){
subcul = plantlets[,c("Location","PlantletID","Mother","Father","Subculture Date")]
colnames(subcul) <- c("Location","Accession","Mother","Father","Date")
subcul$Date = as.Date(subcul$Date, origin="1970-01-01")
if(nrow(subcul)>0){
subcul$Activity = "Sub-culturing"
}
subcul = subcul[complete.cases(subcul),]
} else{
subcul = data.frame(Location = character(), Accession = character(),Mother = character(),Father = character(),anytime::anydate(integer(0)))
}
# # Rooted
if(nrow(plantlets)>0){
rooted = plantlets[,c("Location","PlantletID","Mother","Father","Date of Rooting")]
colnames(rooted) <- c("Location","Accession","Mother","Father","Date")
if(nrow(rooted)>0){
rooted$Activity = "Rooting"
}
rooted = rooted[complete.cases(rooted),]
} else{
rooted = data.frame(Location = character(), Accession = character(),Mother = character(),Father = character(),anytime::anydate(integer(0)))
}
# Screenhse
if(nrow(plantlets)>0){
screen_housed = plantlets[,c("Location","PlantletID","Mother","Father","Screenhouse Transfer Date")]
colnames(screen_housed) <- c("Location","Accession","Mother","Father","Date")
if(nrow(screen_housed)>0){
screen_housed$Activity = "Screen house"
}
screen_housed = screen_housed[complete.cases(screen_housed),]
} else {
screen_housed = data.frame(Location = character(), Accession = character(),Mother = character(),Father = character(),anytime::anydate(integer(0)))
}
# Hardened
if(nrow(plantlets)>0){
hardened = plantlets[,c("Location","PlantletID","Mother","Father","Hardening Date")]
colnames(hardened) <- c("Location","Accession","Mother","Father","Date")
if(nrow(hardened)>0){
hardened$Activity = "Hardening"
}
hardened = hardened[complete.cases(hardened),]
} else {
hardened = data.frame(Location = character(), Accession = character(),Mother = character(),Father = character(),anytime::anydate(integer(0)))
}
# Openfield
if(nrow(plantlets)>0){
open_field = plantlets[,c("Location","PlantletID","Mother","Father","Openfield Transfer Date")]
colnames(open_field) <- c("Location","Accession","Mother","Father","Date")
if(nrow(open_field)>0){
open_field$Activity = "Open field"
}
open_field = open_field[complete.cases(open_field),]
} else {
open_field = data.frame(Location = character(), Accession = character(),Mother = character(),Father = character(),anytime::anydate(integer(0)))
}
cleantable = plyr::rbind.fill(flowered,first_pollinationed,repeat_pollinationed,
harvested,extracted,rescued,germinated_2weeks,germinated_8weeks)
cleantable$Mother = stringi::stri_trans_totitle(tm::stripWhitespace(as.character(gsub(" -","_", cleantable$Mother))))
cleantable$Mother = ifelse(substr(cleantable$Mother,1,3)=='Itc',gsub('Itc','ITC', cleantable$Mother), cleantable$Mother)
cleantable$Mother = ifelse(substr(cleantable$Mother,1,4)=='Iita',gsub('Iita','IITA', cleantable$Mother), cleantable$Mother)
cleantable$Mother = ifelse(substr(cleantable$Mother,1,2)=='Sh',gsub('Sh','SH', cleantable$Mother), cleantable$Mother)
cleantable$Father = stringi::stri_trans_totitle(tm::stripWhitespace(as.character(gsub(" -","_", cleantable$Father))))
cleantable$Father = ifelse(substr(cleantable$Father,1,3)=='Itc',gsub('Itc','ITC', cleantable$Father), cleantable$Father)
cleantable$Father = ifelse(substr(cleantable$Father,1,4)=='Iita',gsub('Iita','IITA', cleantable$Father), cleantable$Father)
cleantable$Father = ifelse(substr(cleantable$Father,1,2)=='Sh',gsub('Sh','SH', cleantable$Father), cleantable$Father)
#rooted,subcul, screen_housed,hardened,open_field,statusD)
# cleantable = cleantable %>%
#   dplyr::filter_at(.vars = vars(Location, Accession), .vars_predicate = any_vars(!is.na(.)))
#
# # Aggregate by uniqueness of parents
# number_of_crosses=na.omit(plyr::count(bananadata, c("Location", "Mother","Father")))
# colnames(number_of_crosses) = c("Location", "Mother","Father","Number of Crosses")
# number_of_seeds = setDT(bananadata[,c("Location","Mother","Father","Total Seeds")])
# number_of_seeds = number_of_seeds[, .(`Total Seeds Extracted`=sum(as.integer(`Total Seeds`))), by = c("Location","Mother","Father")]
#
# number_of_embryo = setDT(bananadata[,c("Location","Mother","Father","Number of Embryo Rescued")])
# number_of_embryo = number_of_embryo[,.(`Number of Embryo Rescued`=sum(as.integer(`Number of Embryo Rescued`))), by = c("Location","Mother","Father")]
#
# number_of_active8weeks = setDT(bananadata[,c("Location","Mother","Father","Actively germinating after 8 Weeks")])
# number_of_active8weeks = number_of_active8weeks[,.(`Number of Embryo Germinating after 8 Weeks`=sum(as.integer(`Actively germinating after 8 Weeks`))), by = c("Location","Mother","Father")]
#
# n_subcultures = setDT(plantlets[,c("Location","Mother","Father",'Subculture Date')])
# n_subcultures = n_subcultures[complete.cases(n_subcultures),]
# subcultures_combined = na.omit(plyr::count(n_subcultures, c("Location","Mother","Father")))
# colnames(subcultures_combined) = c("Location","Mother","Father","Number of Subcultures")
# subcultures_combined$'Number of Subcultures' = as.integer(subcultures_combined$'Number of Subcultures')
#
# n_rooting = setDT(plantlets[,c("Location", "Mother","Father",'Date Rooting')])
# n_rooting = n_rooting[complete.cases(n_rooting),]
# rooting_combined = na.omit(plyr::count(n_rooting, c("Location","Mother","Father")))
# colnames(rooting_combined) = c("Location","Mother","Father","Number of Rooting Plantlets")
# rooting_combined$'Number of Rooting Plantlets' = as.integer(rooting_combined$'Number of Rooting Plantlets')
#
# n_screenhouse = setDT(plantlets[,c("Location", "Mother","Father",'Screenhouse Transfer Date')])
# n_screenhouse = n_screenhouse[complete.cases(n_screenhouse),]
# screenhouse_combined = na.omit(plyr::count(n_subcultures, c("Location","Mother","Father")))
# colnames(screenhouse_combined) = c("Location","Mother","Father","Number of Plantlets Transferred to Screenhouse")
# screenhouse_combined$'Number of Plantlets Transferred to Screenhouse' = as.integer(screenhouse_combined$'Number of Plantlets Transferred to Screenhouse')
#
# n_hardening = setDT(plantlets[,c("Location","Mother","Father",'Hardening Date')])
# n_hardening = n_hardening[complete.cases(n_hardening),]
# hardening_combined = na.omit(plyr::count(n_hardening, c("Location","Mother","Father")))
# colnames(hardening_combined) = c("Location","Mother","Father","NUmber of Plantlets Hardened")
# hardening_combined$'NUmber of Plantlets Hardened' = as.integer(hardening_combined$'NUmber of Plantlets Hardened')
#
# n_openfield = setDT(plantlets[,c("Location", "Mother","Father",'Openfield Transfer Date')])
# n_hardening = n_hardening[complete.cases(n_hardening),]
# openfield_combined = na.omit(plyr::count(n_openfield, c("Location","Mother","Father")))
# colnames(openfield_combined) = c("Location","Mother","Father","Number of Plantlets in Openfield")
# openfield_combined$'Number of Plantlets in Openfield' = as.integer(openfield_combined$'Number of Plantlets in Openfield')
#
# all_plants = list(number_of_crosses, number_of_seeds,number_of_embryo,
#                   number_of_active8weeks, subcultures_combined, rooting_combined, screenhouse_combined, hardening_combined, openfield_combined)
# overall_plants = Reduce(function(x,y) merge(x,y, all = T, by = c("Location","Mother","Father")), all_plants)
#
# # overall_plants = left_join(number_of_crosses, summary_crosses,by = c("Location","Mother","Father"))
# # overall_plants = left_join(overall_plants ,subcultures_combined, by = c("Location","Mother","Father"))
# # overall_plants = left_join(overall_plants,rooting_combined,by = c("Location","Mother","Father"))
# # overall_plants = left_join(overall_plants,screenhouse_combined,by = c("Location","Mother","Father"))
# # overall_plants = left_join(overall_plants,hardening_combined,by = c("Location","Mother","Father"))
# # overall_plants = left_join(overall_plants,openfield_combined,by = c("Location","Mother","Father"))
# #
# overall_plants = unique(overall_plants)
# #overall_plants = na.omit(overall_plants, cols = c("Mother","Father"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# The following code runs inside the database
base_flights() %>%
group_by(dest, dest_name) %>%
tally() %>%
collect() %>%
arrange(desc(n)) %>%
head(10) %>%
arrange(dest_name) %>%
mutate(dest_name = str_sub(dest_name, 1, 30)) %>%
rename(
x = dest,
y = n,
label = dest_name
) %>%
r2d3("bar_plot.js")
res <- base_flights() %>%
group_by(!!grouped) %>%
tally() %>%
collect() %>%
mutate(
y = n,
x = !!grouped
) %>%
select(x, y)
flights[1:2,]
airlines[1:2,]
res <- flights %>%
filter(carrier == "UA") %>%
left_join(airlines, by = "carrier") %>%
rename(airline = name) %>%
left_join(airports, by = c("origin" = "faa")) %>%
rename(origin_name = name) %>%
select(-lat, -lon, -alt, -tz, -dst) %>%
left_join(airports, by = c("dest" = "faa")) %>%
rename(dest_name = name)
res <- flights %>%
filter(carrier == "UA") %>%
left_join(airlines, by = "carrier") %>%
rename(.,airline = name) %>%
left_join(airports, by = c("origin" = "faa")) %>%
rename(origin_name = name) %>%
select(-lat, -lon, -alt, -tz, -dst) %>%
left_join(airports, by = c("dest" = "faa")) %>%
rename(dest_name = name)
res <- flights %>%
filter(carrier == "UA") %>%
left_join(airlines, by = "carrier") %>%
rename("airline" = "name") %>%
left_join(airports, by = c("origin" = "faa")) %>%
rename(origin_name = name) %>%
select(-lat, -lon, -alt, -tz, -dst) %>%
left_join(airports, by = c("dest" = "faa")) %>%
rename(dest_name = name)
res <- flights %>%
filter(carrier == "UA") %>%
left_join(airlines, by = "carrier")
if (input$month == 1) res <- filter(res, month == 1)
res
if (month == 1) res <- filter(res, month == 1)
res <- filter(res, month == 1)
res
res <- base_flights() %>%
group_by(!!grouped) %>%
tally() %>%
collect() %>%
mutate(
y = n,
x = !!grouped
) %>%
select(x, y)
base_flights <- reactive({
base_flights <- reactive({
res <- flights %>%
filter(carrier == "UA") %>%
left_join(airlines, by = "carrier") %>%
left_join(airports, by = c("origin" = "faa")) %>%
rename(origin_name = name) %>%
select(-lat, -lon, -alt, -tz, -dst) %>%
left_join(airports, by = c("dest" = "faa")) %>%
rename(dest_name = name)
res <- filter(res, month == 1)
res
})
)
base_flights <- reactive({
res <- flights %>%
filter(carrier == "UA") %>%
left_join(airlines, by = "carrier") %>%
left_join(airports, by = c("origin" = "faa")) %>%
select(-lat, -lon, -alt, -tz, -dst) %>%
left_join(airports, by = c("dest" = "faa")) %>%
res <- filter(res, month == 1)
res
})
res <- base_flights() %>%
group_by(!!grouped) %>%
tally() %>%
collect() %>%
mutate(
y = n,
x = !!grouped
) %>%
select(x, y)
r2d3(res, "col_plot.js")
runApp()
runApp()
res <- base_flights() %>%
group_by(day) %>%
tally() %>%
collect() %>%
mutate(
y = n,
x = day
) %>%
select(x, y)
runApp('C:/Users/Margaret/Downloads/ECharts2Shiny-master/ECharts2Shiny-master/examples/example-15 Adding Hyperlinks')
runApp()
runApp('C:/Users/Margaret/Downloads/ECharts2Shiny-master/ECharts2Shiny-master/examples/example-16 treemap.R')
runApp('C:/Users/Margaret/Downloads/ECharts2Shiny-master/ECharts2Shiny-master/examples/example-5 Use Reactive Values')
runApp('C:/Users/Margaret/Downloads/ECharts2Shiny-master/ECharts2Shiny-master/examples/example-2 Diverse Plots')
runApp('C:/Users/Margaret/Downloads/Shiny-login-page-master/Shiny-login-page-master')
runApp('C:/Users/Margaret/Downloads/biowarptruck-master/biowarptruck-master/example_apps/app_object.R')
data("citytemp")
citytemp
cleantable[1:4,]
runApp()
runApp()
runApp()
names(plantlets)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinyWidgetsGallery()
runApp()
shinyWidgetsGallery()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data(diamonds, package = "ggplot2")
hcboxplot(x = diamonds$x, var = diamonds$color,
name = "Length", color = "#2980b9")
hcboxplot(x = diamonds$x, var = diamonds$color, var2 = diamonds$cut,
outliers = FALSE) %>%
hc_chart(type = "column") # to put box vertical
hcboxplot(x = diamonds$x, var = diamonds$color, var2 = diamonds$cut,
outliers = FALSE) %>%
hc_chart(type = "bar") # to put box vertical
names(cleantable)
names(bananadata)
f_banana = bananadata %>%
dplyr::rename(Accession = Crossnuber)
full_cleantable = dplyr::left_join(cleantable, f_banana, by="Accession")
f_banana = bananadata %>%
dplyr::rename(Accession = Crossnuber)
f_banana = bananadata %>%f_banana = bananadata %>%
dplyr::rename(Accession = "Crossnuber")
dplyr::rename(Accession = Crossnuber)
f_banana = bananadata %>%
dplyr::rename(Accession = Crossnumber)
full_cleantable = dplyr::left_join(cleantable, f_banana, by="Accession")
View(f_banana)
names(full_cleantable)
f_banana = bananadata %>%
dplyr::select(-c(Location, Mother,Father,FemalePlotName, MalePlotName)) %>%
dplyr::rename(Accession = Crossnumber)
full_cleantable = dplyr::left_join(cleantable, f_banana, by="Accession")
View(full_cleantable)
names(full_cleantable)
full_cleantable = dplyr::left_join(cleantable, f_banana, by="Accession") %>%
dplyr::select(Location, Accession, Date, Activity, -c(Mother,Father,ends_with(" Date")))
names(full_cleantable)
full_cleantable = dplyr::left_join(cleantable, f_banana, by="Accession") %>%
dplyr::select(Location, Accession, Date, Activity, -c(Mother,Father,ends_with(" Date")), everything())
names(full_cleantable)
full_cleantable = dplyr::left_join(cleantable, f_banana, by="Accession") %>%
dplyr::select(Location, Accession, Date, Activity, -c(Mother,Father),-ends_with(" Date"), everything())
names(full_cleantable)
full_cleantable = dplyr::left_join(cleantable, f_banana, by="Accession") %>%
dplyr::select(Location, Accession, Date, Activity, -c(Mother,Father),-ends_with("Date"), everything())
names(full_cleantable)
full_cleantable = dplyr::left_join(cleantable, f_banana, by="Accession") %>%
dplyr::select(-c(Mother,Father,ends_with("Date")))
names(full_cleantable)
full_cleantable = dplyr::left_join(cleantable, f_banana, by="Accession") %>%
dplyr::select(-c(Mother,Father,ends_with("Date")),Date)
names(full_cleantable)
str(full_cleantable)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rm(list=ls())
runApp()
